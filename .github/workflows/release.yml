name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**.md'
      - '.github/workflows/**'

permissions:
  contents: write

env:
  FILE_NAME_PREFIX: geoman-io-leaflet-geoman
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  # Skip workflow run if commit message contains [skip ci]
  check_skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "Proceeding with workflow run"
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}

  test:
    needs: check_skip
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          CI: true

  lint:
    needs: check_skip
    name: Run Linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: ESLint check
        run: npm run eslint
      
      - name: Prettier check
        run: npm run prettier -- --check

  release:
    name: Version, Build and Release
    needs: [test, lint]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GEOMAN_RELEASE_TOKEN }}
      
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Increment patch version
        id: version
        run: |
          # Use npm version to update package.json and create a commit
          npm --no-git-tag-version version patch
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit and push with skip ci flag
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git tag v$NEW_VERSION
          git push origin HEAD:master --follow-tags

      - name: Build project
        run: npm run build

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, use all commits
            COMMITS=$(git log --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" HEAD)
          else
            # Get commits since the previous tag
            COMMITS=$(git log --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" ${PREV_TAG}..HEAD)
          fi
          
          # Create release notes with commit history
          echo "# Changes in v${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "$COMMITS" >> release_notes.md
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Prepare package
        run: npm pack

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          body: ${{ env.RELEASE_NOTES }}
          token: ${{ secrets.GEOMAN_RELEASE_TOKEN }}
          files: |
            ${{env.FILE_NAME_PREFIX}}-${{ steps.version.outputs.version }}.tgz
            LICENSE

      - name: Publish to NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
          npm publish --access public

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "ðŸš€ New Release: v${{ steps.version.outputs.version }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš€ New Release: v${{ steps.version.outputs.version }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The package @upped-events-inc/leaflet-geoman has been published to NPM.\n<https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}|View Release on GitHub>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK