name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**.md'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

env:
  FILE_NAME_PREFIX: geoman-io-leaflet-geoman

jobs:
  # Skip workflow run if commit message contains [skip ci]
  check_skip:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - id: skip_check
        run: |
          echo "should_skip=false" >> $GITHUB_OUTPUT
      - run: echo "Proceeding with workflow run"
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}

  test:
    needs: check_skip
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          CI: true

  lint:
    needs: check_skip
    name: Run Linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: ESLint check
        run: npm run eslint
      
      - name: Prettier check
        run: npm run prettier -- --check

  version:
    name: Increment Version
    needs: [test, lint]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Increment patch version
        id: version
        run: |
          # Use npm version to update package.json and create a commit
          npm --no-git-tag-version version patch
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit and push with skip ci flag
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git tag v$NEW_VERSION
          git push origin HEAD:master --follow-tags

  build:
    name: Build Project
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master # Use the latest code with the version bump
      
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        
      - name: Prepare package
        run: npm pack
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            ${{env.FILE_NAME_PREFIX}}-*.tgz
            LICENSE

  release:
    name: Create Release and Publish
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master # Use the latest code with the version bump
      
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: 'https://npm.pkg.github.com'
          scope: '@upped-events-inc'
          cache: 'npm'
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the version from the previous job
          NEW_VERSION="${{ needs.version.outputs.new_version }}"
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, use all commits
            COMMITS=$(git log --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" HEAD)
          else
            # Get commits since the previous tag
            COMMITS=$(git log --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" ${PREV_TAG}..HEAD)
          fi
          
          # Create release notes with commit history
          echo "# Changes in v${NEW_VERSION}" > release_notes.md
          echo "" >> release_notes.md
          echo "$COMMITS" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.version.outputs.new_version }}
          tag_name: v${{ needs.version.outputs.new_version }}
          body_path: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ${{env.FILE_NAME_PREFIX}}-${{ needs.version.outputs.new_version }}.tgz
            LICENSE
            "files": [
              "dist"
            ]

      - name: Publish to GitHub Packages
        run: npm publish ${{env.FILE_NAME_PREFIX}}-${{ needs.version.outputs.new_version }}.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Slack
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: webhook-trigger
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            version: "${{ needs.version.outputs.new_version }}"
            product_name: "Leaflet Geoman"
            repo: "leaflet-geoman"