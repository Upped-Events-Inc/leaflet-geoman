name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**.md'
      - '.github/workflows/**'
  workflow_dispatch:
    # Allows manual triggering of the workflow

permissions:
  contents: write
  packages: write

env:
  FILE_NAME_PREFIX: geoman-io-leaflet-geoman

jobs:
  # Skip workflow run if commit message contains [skip ci]
  check_skip:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[no ci]') &&
      !contains(github.event.head_commit.message, 'chore: revert version') &&
      !contains(github.event.head_commit.message, 'chore: bump version to')
    steps:
      - run: echo "Proceeding with workflow run"
    outputs:
      should_skip: 'false'

  test:
    needs: check_skip
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline
      
      - name: Run tests
        run: npm test
        env:
          CI: true

  lint:
    needs: check_skip
    name: Run Linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline
      
      - name: ESLint check
        run: npm run eslint
      
      - name: Prettier check
        run: npm run prettier -- --check

  version:
    name: Increment Version
    needs: [test, lint]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Increment patch version
        id: version
        run: |
          # Use npm version to update package.json and create a commit
          npm --no-git-tag-version version patch
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit and push with skip ci flag
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git tag v$NEW_VERSION
          git push origin HEAD:master --follow-tags

  build:
    name: Build Project
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master # Use the latest code with the version bump
      
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        
      - name: Prepare package
        run: npm pack
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            ${{env.FILE_NAME_PREFIX}}-*.tgz
            LICENSE

  release:
    name: Create Release and Publish
    needs: [version, build]
    runs-on: ubuntu-latest
    outputs:
      release_created: 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master # Use the latest code with the version bump
      
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: 'https://npm.pkg.github.com'
          scope: '@upped-events-inc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
        
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: List files after artifact download
        run: |
          echo "Current directory:"
          pwd
          echo "Files in current directory:"
          ls -la
          echo "Files in dist directory (if exists):"
          ls -la dist || echo "dist directory not found"
          echo "Looking for tgz files:"
          find . -name "*.tgz"
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the version from the previous job
          NEW_VERSION="${{ needs.version.outputs.new_version }}"
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, use all commits
            COMMITS=$(git log --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" HEAD)
          else
            # Get commits since the previous tag
            COMMITS=$(git log --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" ${PREV_TAG}..HEAD)
          fi
          
          # Create release notes with commit history
          echo "# Changes in v${NEW_VERSION}" > release_notes.md
          echo "" >> release_notes.md
          echo "$COMMITS" >> release_notes.md
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.version.outputs.new_version }}
          tag_name: v${{ needs.version.outputs.new_version }}
          body_path: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            *.tgz
            LICENSE

      - name: Find tarball file for publishing
        id: find_tarball
        run: |
          # Find the tarball file that was created
          TARBALL=$(find . -name "*.tgz" | head -n 1)
          if [ -n "$TARBALL" ]; then
            echo "tarball=$TARBALL" >> $GITHUB_OUTPUT
            echo "Found tarball: $TARBALL"
          else
            echo "No tarball found, will attempt to create one"
            npm pack
            TARBALL=$(find . -name "*.tgz" | head -n 1)
            echo "tarball=$TARBALL" >> $GITHUB_OUTPUT
            echo "Created tarball: $TARBALL"
          fi

      - name: Publish to GitHub Packages
        id: publish
        run: |
          if [ -f "${{ steps.find_tarball.outputs.tarball }}" ]; then
            npm publish "${{ steps.find_tarball.outputs.tarball }}" && echo "success=true" >> $GITHUB_OUTPUT || echo "success=false" >> $GITHUB_OUTPUT
          else
            echo "Tarball not found, publishing from current directory"
            npm publish && echo "success=true" >> $GITHUB_OUTPUT || echo "success=false" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Notify Slack
      #   uses: slackapi/slack-github-action@v2.0.0
      #   with:
      #     webhook-type: webhook-trigger
      #     webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     payload: |
      #       version: "${{ needs.version.outputs.new_version }}"
      #       product_name: "Leaflet Geoman"
      #       repo: "leaflet-geoman"

  cleanup-on-failure:
    name: Cleanup on Failure
    needs: [version, release]
    if: ${{ always() && needs.version.outputs.new_version != '' && (failure() || needs.release.result == 'failure') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Delete GitHub Release and Undo Version Bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: v${{ needs.version.outputs.new_version }}
        run: |
          echo "Cleaning up failed release for version: ${TAG_NAME} on branch: ${{ github.ref_name }}"
          
          # Pull latest changes to ensure we have the most up-to-date code
          git pull
          
          # Delete the GitHub release
          release_id=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG_NAME}" | \
            jq -r '.id')
          
          if [ "$release_id" != "null" ]; then
            curl -X DELETE -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/${release_id}"
            echo "Deleted release with ID: ${release_id}"
          else
            echo "No release found for tag ${TAG_NAME}"
          fi
          
          # Delete the tag
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -d ${TAG_NAME} 2>/dev/null || echo "Tag ${TAG_NAME} not found locally"
          git push --delete origin ${TAG_NAME} 2>/dev/null || echo "Tag ${TAG_NAME} not found on remote"
          echo "Removed tag: ${TAG_NAME}"
          
          # Look for previous version
          if [ -n "$(git tag)" ]; then
            # Get the latest tag that is not the one being deleted
            PREV_TAG=$(git tag --sort=-v:refname | grep -v "${TAG_NAME}" | head -n 1)
            if [ -n "$PREV_TAG" ]; then
              echo "Found previous tag: ${PREV_TAG}"
              PREV_VERSION=${PREV_TAG#v}
              echo "Previous version: ${PREV_VERSION}"
              
              # Check the current version using both node and direct file reading
              CURRENT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "unknown")
              CURRENT_VERSION_DIRECT=$(grep -o '"version": "[^"]*"' package.json | sed 's/"version": "\([^"]*\)"/\1/')
              echo "Current version (via node): ${CURRENT_VERSION}"
              echo "Current version (direct): ${CURRENT_VERSION_DIRECT}"
              
              # Determine if we need to update based on direct version reading
              if [ "${CURRENT_VERSION_DIRECT}" != "${PREV_VERSION}" ]; then
                echo "Version in package.json needs to be updated to ${PREV_VERSION}"
                # Backup current package.json
                cp package.json package.json.bak
                # Update version using sed (more reliable for this purpose)
                sed -i 's/"version": "[^"]*"/"version": "'${PREV_VERSION}'"/' package.json
                # Verify the change
                diff package.json package.json.bak || echo "Version update verified"
                # Commit the change
                git add package.json
                git commit -m "chore: revert version bump to ${PREV_VERSION} [skip ci]"
                git push
                echo "Successfully reverted version to ${PREV_VERSION}"
              else
                echo "Version in package.json is already ${CURRENT_VERSION_DIRECT}, no update needed"
              fi
            else
              echo "No previous tag found, cannot determine previous version"
            fi
          else
            echo "No tags found in the repository"
          fi
          
          echo "Cleanup completed!"